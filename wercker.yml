# This references the default nodejs container from
# the Docker Hub: https://registry.hub.docker.com/_/node/
# If you want Nodesource's container you would reference nodesource/node
# Read more about containers on our dev center
# http://devcenter.wercker.com/docs/containers/index.html
box: node
# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# http://devcenter.wercker.com/docs/pipelines/index.html

# You can also use services such as databases. Read more on our dev center:
# http://devcenter.wercker.com/docs/services/index.html
# services:
    # - postgres
    # http://devcenter.wercker.com/docs/services/postgresql.html

    # - mongo
    # http://devcenter.wercker.com/docs/services/mongodb.html
build:
  # The steps that will be executed on build
  # Steps make up the actions in your pipeline
  # Read more about steps on our dev center:
  # http://devcenter.wercker.com/docs/steps/index.html
  steps:
    - script:
        name: npm install yarn
        code: |
          npm i -g yarn
    - script:
        name: yarn
        code: |
          yarn
    - script:
        name: echo nodejs information
        code: |
          echo "node version $(node -v) running"
          echo "npm version $(npm -v) running"
    - wacul/store-link:
      type: store
      prefix: node_modules/.bin
build-optimizer:
  steps:
    - wacul/store-link:
      type: restore
      prefix: node_modules/.bin
    - script:
        name: ng build
        code: |
          npm run build
lint:
  steps:
    - wacul/store-link:
      type: restore
      prefix: node_modules/.bin
    - script:
        name: ts lint
        code: |
          npm run lint
    - script:
        name: sass lint
        code: |
          npm run sass-lint
unit-test:
  steps:
    - wacul/store-link:
      type: restore
      prefix: node_modules/.bin
    - script:
        name: install chrome headless
        code: |
          apt-get update -y
          apt-get install -y ca-certificates apt-transport-https ttf-wqy-zenhei ttf-unfonts-core
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add -
          echo "deb https://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list
          apt-get update -y
          apt-get install -y google-chrome-unstable
          export CHROME_BIN=/usr/bin/google-chrome-unstable
    - script:
        name: ng test
        code: |
          npm run test
e2e-test:
  steps:
    - wacul/store-link:
      type: restore
      prefix: node_modules/.bin
    - script:
        name: install chrome headless
        code: |
          apt-get update -y
          apt-get install -y ca-certificates apt-transport-https ttf-wqy-zenhei ttf-unfonts-core
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add -
          echo "deb https://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list
          apt-get update -y
          apt-get install -y google-chrome-unstable
          export CHROME_BIN=/usr/bin/google-chrome-unstable
    - script:
        name: ng e2e
        code: |
          npm run test
deploy:
  steps:
    - script:
        name: ng build
        code: |
          npm run build
    - install-packages:
        packages: lftp
    - script:
        name: azure ftp deploy
        code: |
          lftp -u ${FTP_USERNAME},${FTP_PASSWORD} -e "mirror -Rev -X wercker.yml dist/. /site/wwwroot/." ${FTP_SERVER_URL}
    - script:
        name: echo information
        code: |
          echo "ftp up comp"
